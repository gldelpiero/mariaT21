// Generated by gencpp from file child_detection/ChildDetection.msg
// DO NOT EDIT!


#ifndef CHILD_DETECTION_MESSAGE_CHILDDETECTION_H
#define CHILD_DETECTION_MESSAGE_CHILDDETECTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <general_functions/Position.h>

namespace child_detection
{
template <class ContainerAllocator>
struct ChildDetection_
{
  typedef ChildDetection_<ContainerAllocator> Type;

  ChildDetection_()
    : header()
    , detected(false)
    , angle(0.0)
    , distance(0.0)
    , child_position()  {
    }
  ChildDetection_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , detected(false)
    , angle(0.0)
    , distance(0.0)
    , child_position(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _detected_type;
  _detected_type detected;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _distance_type;
  _distance_type distance;

   typedef  ::general_functions::Position_<ContainerAllocator>  _child_position_type;
  _child_position_type child_position;





  typedef boost::shared_ptr< ::child_detection::ChildDetection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::child_detection::ChildDetection_<ContainerAllocator> const> ConstPtr;

}; // struct ChildDetection_

typedef ::child_detection::ChildDetection_<std::allocator<void> > ChildDetection;

typedef boost::shared_ptr< ::child_detection::ChildDetection > ChildDetectionPtr;
typedef boost::shared_ptr< ::child_detection::ChildDetection const> ChildDetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::child_detection::ChildDetection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::child_detection::ChildDetection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::child_detection::ChildDetection_<ContainerAllocator1> & lhs, const ::child_detection::ChildDetection_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.detected == rhs.detected &&
    lhs.angle == rhs.angle &&
    lhs.distance == rhs.distance &&
    lhs.child_position == rhs.child_position;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::child_detection::ChildDetection_<ContainerAllocator1> & lhs, const ::child_detection::ChildDetection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace child_detection

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::child_detection::ChildDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::child_detection::ChildDetection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::child_detection::ChildDetection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::child_detection::ChildDetection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::child_detection::ChildDetection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::child_detection::ChildDetection_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::child_detection::ChildDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c7596216903a2154c277a5c52dc0801";
  }

  static const char* value(const ::child_detection::ChildDetection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c7596216903a215ULL;
  static const uint64_t static_value2 = 0x4c277a5c52dc0801ULL;
};

template<class ContainerAllocator>
struct DataType< ::child_detection::ChildDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "child_detection/ChildDetection";
  }

  static const char* value(const ::child_detection::ChildDetection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::child_detection::ChildDetection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"# Is there a child?\n"
"bool detected\n"
"\n"
"# If there is a child, contains the angle between the sensor and the child\n"
"# otherwise, contains 0\n"
"# angle is in (-180, 180] degrees\n"
"float64 angle\n"
"\n"
"# If there is a child, contains the distance between the sensor and the child [in meters]\n"
"# otherwise, contains 0\n"
"# distance is in meters\n"
"float64 distance\n"
"\n"
"# If there is a child, contais the global position of the child\n"
"# otherwise, contains (0, 0, 0)\n"
"general_functions/Position  child_position\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: general_functions/Position\n"
"float64 x\n"
"float64 y\n"
"float64 angle\n"
;
  }

  static const char* value(const ::child_detection::ChildDetection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::child_detection::ChildDetection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.detected);
      stream.next(m.angle);
      stream.next(m.distance);
      stream.next(m.child_position);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChildDetection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::child_detection::ChildDetection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::child_detection::ChildDetection_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "detected: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.detected);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "distance: ";
    Printer<double>::stream(s, indent + "  ", v.distance);
    s << indent << "child_position: ";
    s << std::endl;
    Printer< ::general_functions::Position_<ContainerAllocator> >::stream(s, indent + "  ", v.child_position);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CHILD_DETECTION_MESSAGE_CHILDDETECTION_H
