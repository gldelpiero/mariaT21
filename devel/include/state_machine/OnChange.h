// Generated by gencpp from file state_machine/OnChange.msg
// DO NOT EDIT!


#ifndef STATE_MACHINE_MESSAGE_ONCHANGE_H
#define STATE_MACHINE_MESSAGE_ONCHANGE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace state_machine
{
template <class ContainerAllocator>
struct OnChange_
{
  typedef OnChange_<ContainerAllocator> Type;

  OnChange_()
    : header()
    , last(0)
    , current(0)  {
    }
  OnChange_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , last(0)
    , current(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _last_type;
  _last_type last;

   typedef uint8_t _current_type;
  _current_type current;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PUBLIC)
  #undef PUBLIC
#endif
#if defined(_WIN32) && defined(SOCIAL_PUBLIC)
  #undef SOCIAL_PUBLIC
#endif
#if defined(_WIN32) && defined(SOCIAL)
  #undef SOCIAL
#endif
#if defined(_WIN32) && defined(PERSONAL_SOCIAL)
  #undef PERSONAL_SOCIAL
#endif
#if defined(_WIN32) && defined(PERSONAL)
  #undef PERSONAL
#endif

  enum {
    PUBLIC = 0u,
    SOCIAL_PUBLIC = 1u,
    SOCIAL = 2u,
    PERSONAL_SOCIAL = 3u,
    PERSONAL = 4u,
  };


  typedef boost::shared_ptr< ::state_machine::OnChange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::state_machine::OnChange_<ContainerAllocator> const> ConstPtr;

}; // struct OnChange_

typedef ::state_machine::OnChange_<std::allocator<void> > OnChange;

typedef boost::shared_ptr< ::state_machine::OnChange > OnChangePtr;
typedef boost::shared_ptr< ::state_machine::OnChange const> OnChangeConstPtr;

// constants requiring out of line definition

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::state_machine::OnChange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::state_machine::OnChange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::state_machine::OnChange_<ContainerAllocator1> & lhs, const ::state_machine::OnChange_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.last == rhs.last &&
    lhs.current == rhs.current;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::state_machine::OnChange_<ContainerAllocator1> & lhs, const ::state_machine::OnChange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace state_machine

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::state_machine::OnChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::state_machine::OnChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_machine::OnChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::state_machine::OnChange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_machine::OnChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::state_machine::OnChange_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::state_machine::OnChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b753c12898c2836606104c967f05183f";
  }

  static const char* value(const ::state_machine::OnChange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb753c12898c28366ULL;
  static const uint64_t static_value2 = 0x06104c967f05183fULL;
};

template<class ContainerAllocator>
struct DataType< ::state_machine::OnChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "state_machine/OnChange";
  }

  static const char* value(const ::state_machine::OnChange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::state_machine::OnChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 PUBLIC = 0\n"
"uint8 SOCIAL_PUBLIC = 1\n"
"uint8 SOCIAL = 2\n"
"uint8 PERSONAL_SOCIAL = 3\n"
"uint8 PERSONAL = 4\n"
"\n"
"uint8 last\n"
"uint8 current \n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::state_machine::OnChange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::state_machine::OnChange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.last);
      stream.next(m.current);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OnChange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::state_machine::OnChange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::state_machine::OnChange_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "last: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.last);
    s << indent << "current: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.current);
  }
};

} // namespace message_operations
} // namespace ros

#endif // STATE_MACHINE_MESSAGE_ONCHANGE_H
