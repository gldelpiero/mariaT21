// Generated by gencpp from file workspace/WorkSpace.msg
// DO NOT EDIT!


#ifndef WORKSPACE_MESSAGE_WORKSPACE_H
#define WORKSPACE_MESSAGE_WORKSPACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace workspace
{
template <class ContainerAllocator>
struct WorkSpace_
{
  typedef WorkSpace_<ContainerAllocator> Type;

  WorkSpace_()
    : header()
    , child_observation_distance(0.0)
    , child_area(0)
    , robot_bounds_proximity(0.0)  {
    }
  WorkSpace_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_observation_distance(0.0)
    , child_area(0)
    , robot_bounds_proximity(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _child_observation_distance_type;
  _child_observation_distance_type child_observation_distance;

   typedef uint8_t _child_area_type;
  _child_area_type child_area;

   typedef double _robot_bounds_proximity_type;
  _robot_bounds_proximity_type robot_bounds_proximity;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(CHILD_AREA_EXTERNAL)
  #undef CHILD_AREA_EXTERNAL
#endif
#if defined(_WIN32) && defined(CHILD_AREA_OBSERVATION)
  #undef CHILD_AREA_OBSERVATION
#endif
#if defined(_WIN32) && defined(CHILD_AREA_INTERACTION)
  #undef CHILD_AREA_INTERACTION
#endif

  enum {
    CHILD_AREA_EXTERNAL = 0u,
    CHILD_AREA_OBSERVATION = 1u,
    CHILD_AREA_INTERACTION = 2u,
  };


  typedef boost::shared_ptr< ::workspace::WorkSpace_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::workspace::WorkSpace_<ContainerAllocator> const> ConstPtr;

}; // struct WorkSpace_

typedef ::workspace::WorkSpace_<std::allocator<void> > WorkSpace;

typedef boost::shared_ptr< ::workspace::WorkSpace > WorkSpacePtr;
typedef boost::shared_ptr< ::workspace::WorkSpace const> WorkSpaceConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::workspace::WorkSpace_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::workspace::WorkSpace_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::workspace::WorkSpace_<ContainerAllocator1> & lhs, const ::workspace::WorkSpace_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.child_observation_distance == rhs.child_observation_distance &&
    lhs.child_area == rhs.child_area &&
    lhs.robot_bounds_proximity == rhs.robot_bounds_proximity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::workspace::WorkSpace_<ContainerAllocator1> & lhs, const ::workspace::WorkSpace_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace workspace

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::workspace::WorkSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::workspace::WorkSpace_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::workspace::WorkSpace_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::workspace::WorkSpace_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::workspace::WorkSpace_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::workspace::WorkSpace_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::workspace::WorkSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e89ba90aefce0514a1a6081c2178f0d2";
  }

  static const char* value(const ::workspace::WorkSpace_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe89ba90aefce0514ULL;
  static const uint64_t static_value2 = 0xa1a6081c2178f0d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::workspace::WorkSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "workspace/WorkSpace";
  }

  static const char* value(const ::workspace::WorkSpace_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::workspace::WorkSpace_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 CHILD_AREA_EXTERNAL = 0\n"
"uint8 CHILD_AREA_OBSERVATION = 1\n"
"uint8 CHILD_AREA_INTERACTION = 2\n"
"\n"
"Header  header\n"
"float64 child_observation_distance\n"
"uint8   child_area\n"
"float64 robot_bounds_proximity\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::workspace::WorkSpace_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::workspace::WorkSpace_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_observation_distance);
      stream.next(m.child_area);
      stream.next(m.robot_bounds_proximity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorkSpace_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::workspace::WorkSpace_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::workspace::WorkSpace_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_observation_distance: ";
    Printer<double>::stream(s, indent + "  ", v.child_observation_distance);
    s << indent << "child_area: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.child_area);
    s << indent << "robot_bounds_proximity: ";
    Printer<double>::stream(s, indent + "  ", v.robot_bounds_proximity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // WORKSPACE_MESSAGE_WORKSPACE_H
