// Generated by gencpp from file controle/Data.msg
// DO NOT EDIT!


#ifndef CONTROLE_MESSAGE_DATA_H
#define CONTROLE_MESSAGE_DATA_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <controle/Distance.h>

namespace controle
{
template <class ContainerAllocator>
struct Data_
{
  typedef Data_<ContainerAllocator> Type;

  Data_()
    : header()
    , distance()
    , angle(0.0)
    , proxemic_zone(0)
    , workspace_area(0)  {
    }
  Data_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , distance(_alloc)
    , angle(0.0)
    , proxemic_zone(0)
    , workspace_area(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::controle::Distance_<ContainerAllocator>  _distance_type;
  _distance_type distance;

   typedef float _angle_type;
  _angle_type angle;

   typedef uint8_t _proxemic_zone_type;
  _proxemic_zone_type proxemic_zone;

   typedef uint8_t _workspace_area_type;
  _workspace_area_type workspace_area;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PROXEMIC_ZONE_PUBLIC)
  #undef PROXEMIC_ZONE_PUBLIC
#endif
#if defined(_WIN32) && defined(PROXEMIC_ZONE_SOCIAL_PUBLIC)
  #undef PROXEMIC_ZONE_SOCIAL_PUBLIC
#endif
#if defined(_WIN32) && defined(PROXEMIC_ZONE_SOCIAL)
  #undef PROXEMIC_ZONE_SOCIAL
#endif
#if defined(_WIN32) && defined(PROXEMIC_ZONE_PERSONAL_SOCIAL)
  #undef PROXEMIC_ZONE_PERSONAL_SOCIAL
#endif
#if defined(_WIN32) && defined(PROXEMIC_ZONE_PERSONAL)
  #undef PROXEMIC_ZONE_PERSONAL
#endif
#if defined(_WIN32) && defined(WORKSPACE_AREA_EXTERNAL)
  #undef WORKSPACE_AREA_EXTERNAL
#endif
#if defined(_WIN32) && defined(WORKSPACE_AREA_OBSERVATION)
  #undef WORKSPACE_AREA_OBSERVATION
#endif
#if defined(_WIN32) && defined(WORKSPACE_AREA_INTERACTION)
  #undef WORKSPACE_AREA_INTERACTION
#endif

  enum {
    PROXEMIC_ZONE_PUBLIC = 0u,
    PROXEMIC_ZONE_SOCIAL_PUBLIC = 1u,
    PROXEMIC_ZONE_SOCIAL = 2u,
    PROXEMIC_ZONE_PERSONAL_SOCIAL = 3u,
    PROXEMIC_ZONE_PERSONAL = 4u,
    WORKSPACE_AREA_EXTERNAL = 0u,
    WORKSPACE_AREA_OBSERVATION = 1u,
    WORKSPACE_AREA_INTERACTION = 2u,
  };


  typedef boost::shared_ptr< ::controle::Data_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controle::Data_<ContainerAllocator> const> ConstPtr;

}; // struct Data_

typedef ::controle::Data_<std::allocator<void> > Data;

typedef boost::shared_ptr< ::controle::Data > DataPtr;
typedef boost::shared_ptr< ::controle::Data const> DataConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controle::Data_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controle::Data_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controle::Data_<ContainerAllocator1> & lhs, const ::controle::Data_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.distance == rhs.distance &&
    lhs.angle == rhs.angle &&
    lhs.proxemic_zone == rhs.proxemic_zone &&
    lhs.workspace_area == rhs.workspace_area;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controle::Data_<ContainerAllocator1> & lhs, const ::controle::Data_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controle

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::controle::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controle::Data_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controle::Data_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controle::Data_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controle::Data_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controle::Data_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controle::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "8e71096c455d398c228a2768f716cf97";
  }

  static const char* value(const ::controle::Data_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x8e71096c455d398cULL;
  static const uint64_t static_value2 = 0x228a2768f716cf97ULL;
};

template<class ContainerAllocator>
struct DataType< ::controle::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controle/Data";
  }

  static const char* value(const ::controle::Data_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controle::Data_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"controle/Distance distance\n"
"float32 angle\n"
"uint8 PROXEMIC_ZONE_PUBLIC = 0\n"
"uint8 PROXEMIC_ZONE_SOCIAL_PUBLIC = 1\n"
"uint8 PROXEMIC_ZONE_SOCIAL = 2\n"
"uint8 PROXEMIC_ZONE_PERSONAL_SOCIAL = 3\n"
"uint8 PROXEMIC_ZONE_PERSONAL = 4\n"
"uint8 proxemic_zone\n"
"uint8 WORKSPACE_AREA_EXTERNAL = 0\n"
"uint8 WORKSPACE_AREA_OBSERVATION = 1\n"
"uint8 WORKSPACE_AREA_INTERACTION = 2\n"
"uint8 workspace_area\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: controle/Distance\n"
"float32 desired\n"
"float32 observation\n"
"float32 current\n"
;
  }

  static const char* value(const ::controle::Data_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controle::Data_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.distance);
      stream.next(m.angle);
      stream.next(m.proxemic_zone);
      stream.next(m.workspace_area);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Data_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controle::Data_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controle::Data_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "distance: ";
    s << std::endl;
    Printer< ::controle::Distance_<ContainerAllocator> >::stream(s, indent + "  ", v.distance);
    s << indent << "angle: ";
    Printer<float>::stream(s, indent + "  ", v.angle);
    s << indent << "proxemic_zone: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.proxemic_zone);
    s << indent << "workspace_area: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.workspace_area);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLE_MESSAGE_DATA_H
