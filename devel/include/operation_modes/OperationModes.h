// Generated by gencpp from file operation_modes/OperationModes.msg
// DO NOT EDIT!


#ifndef OPERATION_MODES_MESSAGE_OPERATIONMODES_H
#define OPERATION_MODES_MESSAGE_OPERATIONMODES_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace operation_modes
{
template <class ContainerAllocator>
struct OperationModes_
{
  typedef OperationModes_<ContainerAllocator> Type;

  OperationModes_()
    : header()
    , code(0)  {
    }
  OperationModes_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , code(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _code_type;
  _code_type code;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OPERATION_MODE_STOP)
  #undef OPERATION_MODE_STOP
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_PRESENT)
  #undef OPERATION_MODE_PRESENT
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_ROTATE_360)
  #undef OPERATION_MODE_ROTATE_360
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_STAY_CLOSE)
  #undef OPERATION_MODE_STAY_CLOSE
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_STAY_AWAY)
  #undef OPERATION_MODE_STAY_AWAY
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_FOLLOW)
  #undef OPERATION_MODE_FOLLOW
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_GO_TO_ORIGIN)
  #undef OPERATION_MODE_GO_TO_ORIGIN
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_RIGHT_HAND)
  #undef OPERATION_MODE_RIGHT_HAND
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_LEFT_HAND)
  #undef OPERATION_MODE_LEFT_HAND
#endif
#if defined(_WIN32) && defined(OPERATION_MODE_SAVE_LOG)
  #undef OPERATION_MODE_SAVE_LOG
#endif

  enum {
    OPERATION_MODE_STOP = 0u,
    OPERATION_MODE_PRESENT = 1u,
    OPERATION_MODE_ROTATE_360 = 2u,
    OPERATION_MODE_STAY_CLOSE = 3u,
    OPERATION_MODE_STAY_AWAY = 4u,
    OPERATION_MODE_FOLLOW = 5u,
    OPERATION_MODE_GO_TO_ORIGIN = 9u,
    OPERATION_MODE_RIGHT_HAND = 14u,
    OPERATION_MODE_LEFT_HAND = 15u,
    OPERATION_MODE_SAVE_LOG = 89u,
  };


  typedef boost::shared_ptr< ::operation_modes::OperationModes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::operation_modes::OperationModes_<ContainerAllocator> const> ConstPtr;

}; // struct OperationModes_

typedef ::operation_modes::OperationModes_<std::allocator<void> > OperationModes;

typedef boost::shared_ptr< ::operation_modes::OperationModes > OperationModesPtr;
typedef boost::shared_ptr< ::operation_modes::OperationModes const> OperationModesConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::operation_modes::OperationModes_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::operation_modes::OperationModes_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::operation_modes::OperationModes_<ContainerAllocator1> & lhs, const ::operation_modes::OperationModes_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.code == rhs.code;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::operation_modes::OperationModes_<ContainerAllocator1> & lhs, const ::operation_modes::OperationModes_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace operation_modes

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::operation_modes::OperationModes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::operation_modes::OperationModes_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::operation_modes::OperationModes_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::operation_modes::OperationModes_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::operation_modes::OperationModes_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::operation_modes::OperationModes_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::operation_modes::OperationModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "974ab5f9fea522ccc10c633de9ff6821";
  }

  static const char* value(const ::operation_modes::OperationModes_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x974ab5f9fea522ccULL;
  static const uint64_t static_value2 = 0xc10c633de9ff6821ULL;
};

template<class ContainerAllocator>
struct DataType< ::operation_modes::OperationModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "operation_modes/OperationModes";
  }

  static const char* value(const ::operation_modes::OperationModes_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::operation_modes::OperationModes_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"uint8 OPERATION_MODE_STOP = 0\n"
"uint8 OPERATION_MODE_PRESENT = 1\n"
"uint8 OPERATION_MODE_ROTATE_360 = 2\n"
"uint8 OPERATION_MODE_STAY_CLOSE = 3\n"
"uint8 OPERATION_MODE_STAY_AWAY = 4\n"
"uint8 OPERATION_MODE_FOLLOW = 5\n"
"\n"
"uint8 OPERATION_MODE_GO_TO_ORIGIN = 9\n"
"\n"
"uint8 OPERATION_MODE_RIGHT_HAND = 14\n"
"uint8 OPERATION_MODE_LEFT_HAND = 15\n"
"\n"
"uint8 OPERATION_MODE_SAVE_LOG = 89\n"
"\n"
"uint8 code\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::operation_modes::OperationModes_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::operation_modes::OperationModes_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.code);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OperationModes_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::operation_modes::OperationModes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::operation_modes::OperationModes_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "code: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.code);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPERATION_MODES_MESSAGE_OPERATIONMODES_H
